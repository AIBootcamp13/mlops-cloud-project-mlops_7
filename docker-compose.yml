name: mlops

# YAML 앵커 기능을 사용하여, airflow 공통 설정을 정의하고 재사용할 수 있도록 함

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: airflow/Dockerfile
  environment:
    # 데이터베이스 연결 설정
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW_DATABASE_URL}
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor

    # 성능 최적화 설정
    - AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=300  # DAG 파싱 간격 증가 (기본 60초)
    - AIRFLOW__CORE__DAG_FILE_PROCESSOR_TIMEOUT=300  # DAG 처리 타임아웃 증가
    - AIRFLOW__CORE__PARALLELISM=4                   # 전체 병렬 작업 수 제한
    - AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG=1       # DAG당 동시 실행 제한
    - AIRFLOW__SCHEDULER__MAX_THREADS=2              # 스케줄러 스레드 제한

    # 불필요한 기능 비활성화
    - AIRFLOW__CORE__LOAD_EXAMPLES=False             # 예제 DAG 비활성화
    - AIRFLOW__SCHEDULER__USE_JOB_SCHEDULE=True      # 작업 스케줄 최적화

    # 로깅 최적화
    - AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION=/opt/airflow/logs/dag_processor_manager.log
    - AIRFLOW__LOGGING__LOGGING_LEVEL=INFO           # 로깅 레벨 INFO로 설정

    # 보안 설정
    - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}

    # 메모리 최적화
    - AIRFLOW__WEBSERVER__WORKER_REFRESH_INTERVAL=3600  # 웹서버 워커 리프레시 간격 증가
    - AIRFLOW__WEBSERVER__WORKER_REFRESH_BATCH_SIZE=1   # 웹서버 워커 리프레시 배치 크기 제한
  env_file:
    - .env
  volumes:
    - ./src:/opt/project/src
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./notebooks:/opt/notebooks
  depends_on:
    postgres:
      condition: service_healthy
  restart: unless-stopped
  networks:
    - mlops-network


services:
  # FastAPI 애플리케이션
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./api:/app/api
    env_file:
      - .env
    networks:
      - mlops-network
    depends_on:
      - airflow-webserver

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:17-alpine
    container_name: airflow-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      # PostgreSQL 성능 최적화
      - POSTGRES_HOST_AUTH_METHOD=trust
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mlops-network

  # Airflow 웹서버
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow 스케줄러
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow 초기화
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create -u admin -p admin -f Admin -l User -r Admin -e admin@example.com"
    # 초기화 서비스에는 종료 시 자동 제거 설정
    restart: "no"


networks:
  mlops-network:
    driver: bridge


volumes:
  postgres-data:
